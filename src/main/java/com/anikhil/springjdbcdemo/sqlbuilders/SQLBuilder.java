package com.anikhil.springjdbcdemo.sqlbuilders;

import com.anikhil.springjdbcdemo.sqlfields.SQLField;
import com.anikhil.springjdbcdemo.utils.TableMapping;
import org.springframework.stereotype.Service;

import java.util.Map;

/**
 * Generates query for basic SQL operations
 * These are complete operations that can happen on any table
 */
@Service
public class SQLBuilder {

    public static void main(String[] args) {
        String selectQuery = new SQLBuilder().buildSelectQuery(TableMapping.COURSE);
        System.out.println(selectQuery);
    }

    protected String buildSelectQuery(TableMapping tableMapping) {
        return select(tableMapping.getSqlFields()) +
                from(tableMapping.getTableName());
    }

    protected String buildInsertQuery(TableMapping tableMapping) {
        return insert(tableMapping.getTableName(), tableMapping.getSqlFields())
                + values(tableMapping.getSqlFields());
    }

    protected String buildCreateQuery(TableMapping tableMapping) {
        return null;
    }

    protected String buildDeleteQuery(TableMapping tableMapping) {
        return null;
    }

    protected String select(SQLField... sqlFields) {
        StringBuilder selectBuilder = new StringBuilder("SELECT ");
        for (SQLField sqlField : sqlFields) {
            selectBuilder.append(sqlField.getDbColumn()).append(", ");
        }

        // removing the last ,
        selectBuilder.delete(selectBuilder.length() - 2, selectBuilder.length());

        return selectBuilder.toString();
    }

    protected String insert(String tableName, SQLField... sqlFields) {
        StringBuilder selectBuilder = new StringBuilder("INSERT ")
                .append("INTO ")
                .append(tableName)
                .append("(");

        for (SQLField sqlField : sqlFields) {
            // do not insert into auto_increment fields
            if (!sqlField.getColumnMapping().isAutoGenerated()) {
                selectBuilder.append(sqlField.getDbColumn()).append(", ");
            }
        }

        // removing the last , and inserting ") "
        selectBuilder.delete(selectBuilder.length() - 2, selectBuilder.length())
                .append(") ");

        return selectBuilder.toString();
    }

    protected String values(SQLField... sqlFields) {
        StringBuilder selectBuilder = new StringBuilder("VALUES(");
        for (SQLField sqlField : sqlFields) {
            // do not insert into auto_increment fields
            if (!sqlField.getColumnMapping().isAutoGenerated()) {
                selectBuilder.append(sqlField.getDbColumn()).append(", ");
            }
        }

        // removing the last , and inserting ") "
        selectBuilder.delete(selectBuilder.length() - 2, selectBuilder.length())
                .append(")");

        return selectBuilder.toString();
    }

    protected String from(String tableName) {
        return " FROM " +
                tableName;
    }

    protected String equal(Map<SQLField, SQLField> equalParams) {
//        return " = " +
//                sqlField.getDbColumn();
        return null;
    }

    protected String where(SQLField sqlField) {
        return " WHERE"  + sqlField;
    }
}
